2^5
2+2
2^5
2^5
abs(-400)
?abs
?abs
class(TRUE)
class(2)
class(2L)
class(2)
students=30
students
sum.of.lectures=12*90
sum.of.lectures
class(students)
class(sum.of.lectures)
is.integer(students)
c(5000, 1500,500)
students=c(5000,1500,500)
major=c("BUS","ECON","LAW")
class(major)
profs=c(100,20,10)
students+profs
students/profs
ratio=students/profs
students>profs
students[2]
HSG=data.frame(major,students)
HSG
data.frame(HSG,major)
str(HSG)
HSG$PHDs=c(700,110,50)
HSG
major="MED"
students=100
PHDs=10
new.major=c(major,students,PHDs)
total.HSG=rbind(HSG,new.major)
total.HSG
is.vector(new.major)
new.major=data.frame(major,students,PHDs)
is.data.frame((new.major))
total.HSG=rbind(HSG,new.major)
total.HSG
total.HSG[2,]
total.HSG[1:3,]
total.HSG[,2]
total.HSG[,1:2]
total.HSG[3,2]
installed.packages()
install.packages("slidify")
install.packages("devtools")
source ("http://bioconductor.org/biocLite.R")
bioLite()
biocLite()
library(devtools)
find_rtools()
find_rtools()
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
x <- 1
x
msg <- "hello"
msg <- "hello"
print(x)
print(x)
x <- 1
x
msg <- "hello"
## test
print(x)
print(msg)
y<-1:20
y
y
z<-vector()
z
z<-Inf
z
z<-Inf-1
z
z<-(Inf-1)
z
attributes(z)
a<-c(0.5,0.6)
b<-(T,F)
b<-c(TRUE,FALSE)
as.character(b)
b
class(b)
as.character(b)
c<-list(1,"a",TRUE)
c
m<-matrix(nrow=2,ncol=3)
m
dim(m)
attributes(m)
m<-matrix(1:9,nrow=3,ncol=3)
m<-matrix(1:9,nrow=3,ncol=3)
m<-matrix(nrow=2,ncol=3)
m
dim(m)
attributes(m)
m<-matrix(1:9,nrow=3,ncol=3)
m
x<-1:3
y<-10:12
cbind(x,y)
x<-factor(c("yes","yes","no"))
x
table(x)
unclass(x)
x<-factor(c("yes","yes","no"), levels=c("yes","no"))
x
is.na(x)
is.nan(x)
z<-data.frame(foo=1:4,poo=4:8)
z<-data.frame(foo=1:4,poo=4:7)
z
?read.table
?read.csv
cube<-function(x,n){
x*n
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(z)
3
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
cube<-function(x,n){
x*n
}
cube(3)
setwd("C:/Users/Jan Moritz/Desktop/Week3GIT/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-1:4
makevector(x)
makeVector(x)
cachemean(x)
makeVector(x)
cachemean(x)
makeVector()
cachemean(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
y<-matrix(1:4,2,2)
View(y)
cacheSolve(y)
makeCacheMatrix(y)
cacheSolve(y)
m2<-makeCacheMatrix(m)
cacheSolve(m2)
m2<-makeCacheMatrix(y)
cacheSolve(m2)
m2
y<-matrix(1:4,2,2)
makeCacheMatrix(y)
cacheSolve(y)
y<-matrix(1:4,2,2)
y2<-makeCacheMatrix(y)
cacheSolve(y2)
y
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){x <<- y inv <<- NULL}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
# cached inverse of matrix
inv <- NULL
## getter/setter for matrix
get <- function() x
set <- function(y) {
x <<- y
inv <<- NULL
}
## getter/setter for matrix inverse
getinv <- function() inv
setinv <- function(inverse) inv <<- inverse
## return list of functions for matrix
list(get=get, set=set, getinv=getinv, setinv=setinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# return cached matrix inverse if it's been already computed
if (!is.null(inv)) {
message("inverse is cached")
return(inv)
}
# compute inverse of matrix
m <- x$get()
inv <- solve(m, ...)
# cache inverse
x$setinv(inv)
# return inverse of matrix
return(inv)
}
makeCacheMatrix <- function(x = matrix()) {
# object for cached inverse of matrix
inv <- NULL
## get and set function for matrix
get <- function() x
set <- function(y) {
x <<- y
inv <<- NULL
}
## get and set function for matrix inverse
getinv <- function() inv
setinv <- function(inverse) inv <<- inverse
## return list of functions for matrix
list(get=get, set=set, getinv=getinv, setinv=setinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# if inverse has been calculated before, return cached matrix inverse
if (!is.null(inv)) {
message("retrieving cached inverse")
inv
}
# calculate inverse of matrix
m <- x$get()
inv <- solve(m, ...)
# cache inverse
x$setinv(inv)
# return inverse of matrix
inv
}
m<-matrix(c(1,0,0,1),2,2)
View(m)
m_new<-makeCacheMatrix(m)
m
cacheSolve(m_new)
m2<-matrix(c(4,2,7,6),2,2)
m2<-matrix(c(4,2,7,6),2,2)
m2_new<-makeCacheMatrix(m2)
m2
cacheSolve(m2_new)
